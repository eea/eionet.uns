<project name="UNS Project" default="compile" basedir=".">



<!-- ===================== Property Definitions =========================== -->


<!--

  These properties generally define file and directory names (or paths) that
  affect where the build process stores its outputs.


  build.home           The directory into which the "prepare" and
                       "compile" targets will generate their output.
                       Defaults to "build".

  dist.home            The name of the base directory in which
                       distribution files are created.
                       Defaults to "dist".


-->

  

  <property file="default.properties"/>

  <property name="build.home"    value="${basedir}/build"/> 
  <property name="dist.home"     value="${basedir}/dist"/>
  <property name="docs.home"     value="${basedir}/docs"/>
  <property name="src.home"      value="${basedir}/src/main/java"/>
  <property name="web.home"      value="${basedir}/src/main/public_html"/>






  

<!--  ==================== Compilation Control Options ==================== -->

<!--

  These properties control option settings on the Javac compiler when it
  is invoked using the <javac> task.

  compile.debug        Should compilation include the debug option?

  compile.deprecation  Should compilation include the deprecation option?

  compile.optimize     Should compilation include the optimize option?

-->

  <property name="compile.debug"       value="true"/>
  <property name="compile.deprecation" value="false"/>
  <property name="compile.optimize"    value="true"/>



<!-- ==================== Compilation Classpath =========================== -->

  <path id="compile.classpath">

    <!-- Include all elements that Tomcat exposes to applications -->
    <fileset dir="${web.home}/WEB-INF/lib">
      <include name="*.jar"/>
    </fileset>    
    <pathelement location="${catalina.home}/common/classes"/>
    <fileset dir="${catalina.home}/common/endorsed">
      <include name="*.jar"/>
    </fileset>
    <fileset dir="${catalina.home}/common/lib">
      <include name="*.jar"/>
    </fileset>
    <pathelement location="${catalina.home}/shared/classes"/>
    <fileset dir="${catalina.home}/shared/lib">
      <include name="*.jar"/>
    </fileset>

  </path>



<!-- ==================== Clean Target ==================================== -->

<!--

  The "clean" target deletes any previous "build" and "dist" directory,
  so that you can be ensured the application can be built from scratch.

-->

  <target name="clean"
   description="Delete old build and dist directories">
    <delete dir="${build.home}"/>
    <delete dir="${dist.home}"/>
<!--    <delete dir="${uns_python_source.home}"/> -->
  </target>


<!-- ==================== Prepare Target ================================== -->

<!--

  The "prepare" target is used to create the "build" destination directory,
  and copy the static contents of web application to it.  
  Normally, this task is executed indirectly when needed.

-->

  <target name="prepare">

    <!-- Create build directories as needed -->
    <mkdir  dir="${build.home}"/>
    <mkdir  dir="${build.home}/WEB-INF"/>
    <mkdir  dir="${build.home}/WEB-INF/classes"/>


    <!-- Copy static content of this web application -->
    <copy todir="${build.home}">
      <fileset dir="${web.home}"/>
    </copy>

    <replace file="${build.home}/META-INF/context.xml" token="@CONTEXT_PATH@" value="${context.path}"/>
    <replace file="${build.home}/META-INF/context.xml" token="@app.name@" value="${app.name}"/>
    <replace file="${build.home}/META-INF/context.xml" token="@UNS_HOME@" value="${uns.home}"/>
    <replace file="${build.home}/META-INF/context.xml" token="@db.url@" value="${db.url}"/>
    <replace file="${build.home}/META-INF/context.xml" token="@db.user@" value="${db.user}"/>
    <replace file="${build.home}/META-INF/context.xml" token="@db.password@" value="${db.password}"/>

    <mkdir  dir="${build.home}/WEB-INF/lib"/>

  </target>

  <target name="pythoninstall">
    <mkdir dir="${uns_python_source.home}" />
    <copy  todir="${uns_python_source.home}" >
	<fileset dir="${basedir}/src/main/python" />
      <filterset>
       <filter token="UNS_PYTHON_SOURCE_HOME" value="${uns_python_source.home}"/>
       <filter token="UNS_HOME" value="${uns.home}"/>
       <filter token="PYTHON_HOME" value="${python.home}"/>
       <filter token="UNS_URL" value="${uns.url}"/>
	</filterset>
    </copy>

   <chmod file="${uns_python_source.home}/UNS/unsd.sh" perm="+x"/>	

    <mkdir dir="${uns.home}" />
    <mkdir dir="${uns.home}/log" />
    <copy  todir="${uns.home}/acl" >
      <fileset dir="${basedir}/src/main/resources/acl" />
    </copy>

    <copy  todir="${uns.home}/xsl" >
      <fileset dir="${basedir}/src/main/resources/xsl" />
    </copy>

    <copy file="${basedir}/src/main/resources/uns.properties" todir="${uns.home}" >
      <filterset>
       <filter token="UNS_PYTHON_SOURCE_HOME" value="${uns_python_source.home}"/>
       <filter token="JYTHON_HOME" value="${jython.home}"/>
      </filterset>
    </copy>	

    <copy file="${basedir}/src/main/resources/uns-config.xml" todir="${uns.home}" />
    <copy file="${basedir}/src/main/resources/UNSServices.xml" todir="${uns.home}" />

  </target>




<!-- ==================== Compile Target ================================== -->

<!--

  The "compile" target transforms source files (from  "src" directory)
  into object files in the appropriate location in the build directory.
-->

  <target name="compile" depends="prepare"
   description="Compile Java sources">

    <!-- Compile Java classes as necessary -->
    <mkdir    dir="${build.home}/WEB-INF/classes"/>
    <javac srcdir="${src.home}"
          destdir="${build.home}/WEB-INF/classes"
           source="1.4"    	
            debug="${compile.debug}"
      deprecation="${compile.deprecation}"
         optimize="${compile.optimize}">
        <classpath refid="compile.classpath"/>
    </javac>

    <!-- Copy application resources -->
    <copy  todir="${build.home}/WEB-INF/classes">
      <fileset dir="${basedir}/src/main/resources" />
      <filterset>
       <filter token="UNS_HOME" value="${uns.home}"/>
       <filter token="LDAP_URL" value="${ldap.url}"/>
       <filter token="db.url" value="${db.url}"/>
       <filter token="db.user" value="${db.user}"/>
       <filter token="db.password" value="${db.password}"/>
      </filterset>
    </copy>

  </target>



<!-- ==================== Dist Target ===================================== -->


<!--

  The "dist" target creates a binary distribution of the UNS application
  in a directory structure ready to be archived in a tar.gz or zip file.
  Note that this target depends on compile target:
  * "compile" so that the entire web application (including external
    dependencies) will have been assembled
-->

  <target name="dist" depends="compile"
   description="Create binary distribution">
    <!-- Create application JAR file -->
    <mkdir   dir="${dist.home}"/>
    <jar jarfile="${dist.home}/${app.name}.war"
         basedir="${build.home}"/>
  </target>



</project>
